{"ast":null,"code":"var _jsxFileName = \"/Users/isabel/Documents/bnta_work/week_09/day_3/bakery_lab/src/cake/Cake.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Cake = _ref => {\n  let {\n    cakeName,\n    ingredients,\n    price,\n    rating\n  } = _ref;\n  // add the properties in a simple way referring to day2 lab\n  // add an unordered list with the properties of the cake in them referring to day1 lab\n\n  const returnIngredientsAsList = () => {\n    ingredients;\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: cakeName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"name: \", cakeName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [\"ingredients: \", ingredients]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"price: \", price]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"rating: \", rating]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_c = Cake;\nexport default Cake;\nvar _c;\n$RefreshReg$(_c, \"Cake\");","map":{"version":3,"names":["Cake","_ref","cakeName","ingredients","price","rating","returnIngredientsAsList","_jsxDEV","_Fragment","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/isabel/Documents/bnta_work/week_09/day_3/bakery_lab/src/cake/Cake.js"],"sourcesContent":["const Cake = ({cakeName, ingredients, price, rating}) => {\n        // add the properties in a simple way referring to day2 lab\n        // add an unordered list with the properties of the cake in them referring to day1 lab\n\nconst returnIngredientsAsList = () =>{\n  ingredients\n}        \n\n  return (\n    <>\n        <h2>{cakeName}</h2>\n        <p>name: {cakeName}</p>\n        <ul>ingredients: {ingredients}</ul>\n        <p>price: {price}</p>\n        <p>rating: {rating}</p>\n\n\n    </>\n  )\n}\n\nexport default Cake;"],"mappings":";;;AAAA,MAAMA,IAAI,GAAGC,IAAA,IAA4C;EAAA,IAA3C;IAACC,QAAQ;IAAEC,WAAW;IAAEC,KAAK;IAAEC;EAAM,CAAC,GAAAJ,IAAA;EAC5C;EACA;;EAER,MAAMK,uBAAuB,GAAGA,CAAA,KAAK;IACnCH,WAAW;EACb,CAAC;EAEC,oBACEI,OAAA,CAAAC,SAAA;IAAAC,QAAA,gBACIF,OAAA;MAAAE,QAAA,EAAKP;IAAQ;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACnBN,OAAA;MAAAE,QAAA,GAAG,QAAM,EAACP,QAAQ;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBN,OAAA;MAAAE,QAAA,GAAI,eAAa,EAACN,WAAW;IAAA;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACnCN,OAAA;MAAAE,QAAA,GAAG,SAAO,EAACL,KAAK;IAAA;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBN,OAAA;MAAAE,QAAA,GAAG,UAAQ,EAACJ,MAAM;IAAA;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA,eAGzB,CAAC;AAEP,CAAC;AAAAC,EAAA,GAnBKd,IAAI;AAqBV,eAAeA,IAAI;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}